name: Ngage Playwright Test Report

on:
  schedule:
    - cron: "30 3 * * 1-5"   # 9:00 AM IST, Monday‚ÄìFriday
  workflow_dispatch:
permissions:
  contents: write     

jobs:
  smoke:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Install additional tools
        run: sudo apt-get update && sudo apt-get install -y bc jq

      - name: Run Playwright smoke tests with HTML + JSON report
        id: tests
        continue-on-error: true  # Continue workflow even if tests fail
        run: |
          mkdir -p reports
          
          echo "Starting Playwright tests with media permission fixes..."
          echo "CI Environment: $CI"
          echo "Node version: $(node --version)"
          echo "Playwright version: $(npx playwright --version)"
          
          # Set explicit display for headless mode
          export DISPLAY=:99.0
          
          # Run tests with enhanced media support and JSON reporter
          npx playwright test --grep @smoke --workers=1 --timeout=180000 
          
          ts=$(date +'%Y-%m-%d_%H-%M-%S')
          
          # Debug: Show what files were generated
          echo "üîç Checking for generated files..."
          echo "Current directory contents:"
          ls -la
          echo "Test-results directory:"
          ls -la test-results/ 2>/dev/null || echo "No test-results directory found"
          echo "Playwright-report directory:"
          ls -la playwright-report/ 2>/dev/null || echo "No playwright-report directory found"
          
          # Move reports and handle missing files gracefully
          if [ -d "playwright-report" ]; then
            mv playwright-report "reports/$ts"
          else
            mkdir -p "reports/$ts"
            echo "No HTML report generated" > "reports/$ts/index.html"
          fi
          
          # Try multiple possible locations for results.json
          if [ -f "test-results/results.json" ]; then
            echo "‚úÖ Found results.json in test-results/"
            mv test-results/results.json "reports/$ts/results.json"
          elif [ -f "results.json" ]; then
            echo "‚úÖ Found results.json in root directory"
            mv results.json "reports/$ts/results.json"
          else
            echo "‚ùå No results.json file found in expected locations"
            echo "Available files in current directory:"
            find . -name "*.json" -type f 2>/dev/null || echo "No JSON files found"
            
            # Create a minimal results file for failed execution
            echo '{"stats":{"expected":0,"unexpected":1,"flaky":0,"skipped":0,"duration":0},"suites":[]}' > "reports/$ts/results.json"
          fi
          
          echo "REPORT_TS=$ts" >> $GITHUB_ENV

      - name: Deploy Playwright reports to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports
          publish_branch: gh-pages
          keep_files: true

      - name: Parse results and send summary to Teams
        if: always()
        run: |
          RESULTS_FILE="reports/$REPORT_TS/results.json"
          
          # Check if results file exists and has actual test data
          if [ ! -f "$RESULTS_FILE" ]; then
            echo "Results file not found, sending failure notification"
            curl -H 'Content-Type: application/json' \
              -d "{\"text\": \"üö® **Ngage Test Results**\n\n‚ùå Test execution failed - no results available\nüïê Time: $(TZ='Asia/Kolkata' date +'%a %b %d %Y, %I:%M:%S %p IST')\nüîó [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n---\nüë§ **Sent by:** ng-navaneetha\"}" \
              ${{ secrets.TEAMS_WEBHOOK_URL }}
            exit 0
          fi
          
          echo "‚úÖ Results file found. Contents structure:"
          # First 30 lines for debugging
          echo "First 30 lines of results file:"
          head -30 "$RESULTS_FILE"
          echo "--- End debug info ---"
          
          # Check if this is a new Playwright format (has suites) or old format (has stats)
          HAS_SUITES=$(jq 'has("suites")' $RESULTS_FILE 2>/dev/null || echo "false")
          HAS_STATS=$(jq 'has("stats")' $RESULTS_FILE 2>/dev/null || echo "false")
          echo "Has suites: $HAS_SUITES, Has stats: $HAS_STATS"
          
          # Debug: Show actual structure
          echo "JSON structure preview:"
          jq 'keys' $RESULTS_FILE 2>/dev/null || echo "Failed to parse JSON keys"
          
          # Check if it's a placeholder file (created when tests fail early)
          TOTAL_FROM_STATS=$(jq -r '.stats.expected + .stats.unexpected + .stats.flaky // 0' $RESULTS_FILE 2>/dev/null || echo "0")
          
          if [ "$TOTAL_FROM_STATS" -eq 0 ]; then
            echo "Empty or invalid results file, checking for actual test results"
            # Try the robust method to count actual test results
            ACTUAL_TESTS=$(jq '[.. | objects | select(.status? != null)] | length' $RESULTS_FILE 2>/dev/null || echo "0")
            
            if [ "$ACTUAL_TESTS" -eq 0 ]; then
              echo "No actual test results found, sending failure notification"
              curl -H 'Content-Type: application/json' \
                -d "{\"text\": \"üö® **Ngage Test Results**\n\n‚ùå Test execution failed - no test results found\nüïê Time: $(TZ='Asia/Kolkata' date +'%a %b %d %Y, %I:%M:%S %p IST')\nüîó [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n---\nüë§ **Sent by:** ng-navaneetha\"}" \
                ${{ secrets.TEAMS_WEBHOOK_URL }}
              exit 0
            fi
          fi
          
          # Parse test results with correct nested structure: suites[].suites[].specs[]
          TOTAL_TESTS=$(jq '
            [.suites[]?.suites[]?.specs[] // empty] | length
          ' $RESULTS_FILE 2>/dev/null || echo "0")
          
          # Count specs by their overall status (using spec.ok which is most reliable)
          PASSED_TESTS=$(jq '
            [.suites[]?.suites[]?.specs[] // empty | 
             select(.ok == true)] | length
          ' $RESULTS_FILE 2>/dev/null || echo "0")
          
          FAILED_TESTS=$(jq '
            [.suites[]?.suites[]?.specs[] // empty | 
             select(.ok == false)] | length
          ' $RESULTS_FILE 2>/dev/null || echo "0")
          
          # For flaky tests, check the actual test results status
          FLAKY_TESTS=$(jq '
            [.suites[]?.suites[]?.specs[] // empty | 
             select(.tests[]?.results[]?.status == "flaky")] | length
          ' $RESULTS_FILE 2>/dev/null || echo "0")
          
          # For skipped tests, check the actual test results status  
          SKIPPED_TESTS=$(jq '
            [.suites[]?.suites[]?.specs[] // empty | 
             select(.tests[]?.results[]?.status == "skipped")] | length
          ' $RESULTS_FILE 2>/dev/null || echo "0")
          
          DURATION=$(jq -r '.stats.duration // 0' $RESULTS_FILE 2>/dev/null || echo "0")
          
          # Fallback to stats if spec parsing gives 0 results or fails
          if [ "$TOTAL_TESTS" -eq 0 ] || [ "$PASSED_TESTS" -eq 0 -a "$FAILED_TESTS" -eq 0 ]; then
            echo "Falling back to stats-based parsing"
            TOTAL_TESTS=$(jq -r '(.stats.expected // 0) + (.stats.unexpected // 0) + (.stats.flaky // 0) + (.stats.skipped // 0)' $RESULTS_FILE 2>/dev/null || echo "0")
            PASSED_TESTS=$(jq -r '.stats.expected // 0' $RESULTS_FILE 2>/dev/null || echo "0")
            FAILED_TESTS=$(jq -r '.stats.unexpected // 0' $RESULTS_FILE 2>/dev/null || echo "0")
            FLAKY_TESTS=$(jq -r '.stats.flaky // 0' $RESULTS_FILE 2>/dev/null || echo "0")
            SKIPPED_TESTS=$(jq -r '.stats.skipped // 0' $RESULTS_FILE 2>/dev/null || echo "0")
          fi
          
          echo "Parsed counts - Total: $TOTAL_TESTS, Passed: $PASSED_TESTS, Failed: $FAILED_TESTS, Flaky: $FLAKY_TESTS, Skipped: $SKIPPED_TESTS, Duration: $DURATION"
          
          # Debug output to understand parsing
          echo "Debug: TOTAL_TESTS=$TOTAL_TESTS, PASSED_TESTS=$PASSED_TESTS, FAILED_TESTS=$FAILED_TESTS"
          
          # Ensure we have valid numbers (convert empty/null to 0)
          TOTAL_TESTS=${TOTAL_TESTS:-0}
          PASSED_TESTS=${PASSED_TESTS:-0}
          FAILED_TESTS=${FAILED_TESTS:-0}
          FLAKY_TESTS=${FLAKY_TESTS:-0}
          SKIPPED_TESTS=${SKIPPED_TESTS:-0}
          
          # Convert duration to seconds
          DURATION_SEC=$(echo "scale=1; $DURATION / 1000" | bc -l 2>/dev/null || echo "0")

          # Determine status and emoji - be explicit about the logic
          echo "Status determination: FAILED_TESTS=$FAILED_TESTS, FLAKY_TESTS=$FLAKY_TESTS, PASSED_TESTS=$PASSED_TESTS"
          
          if [ "$FAILED_TESTS" -eq 0 ] && [ "$FLAKY_TESTS" -eq 0 ] && [ "$PASSED_TESTS" -gt 0 ]; then
            STATUS="‚úÖ All Tests Passed"
            EMOJI="üéâ"
            echo "Status set to: All Tests Passed"
          elif [ "$FAILED_TESTS" -gt 0 ]; then
            STATUS="‚ùå Tests Failed"
            EMOJI="üö®"
            echo "Status set to: Tests Failed"
          elif [ "$FLAKY_TESTS" -gt 0 ]; then
            STATUS="‚ö†Ô∏è Flaky Tests Detected"
            EMOJI="‚ö†Ô∏è"
            echo "Status set to: Flaky Tests"
          else
            STATUS="‚ùì Unknown Test Status"
            EMOJI="‚ùì"
            echo "Status set to: Unknown (may be parsing issue)"
          fi

          # Get test summary with status - using correct nested structure
          summary=$(jq -r '
            .suites[]?.suites[]?.specs[] // empty | 
            select(.title) |
            if .ok == true then
              "‚Ä¢ " + .title + " ‚Üí ‚úÖ passed"
            else
              "‚Ä¢ " + .title + " ‚Üí ‚ùå failed"  
            end
          ' $RESULTS_FILE 2>/dev/null | head -15)
          
          # Fallback to simple spec listing if complex status parsing fails
          if [ -z "$summary" ]; then
            echo "Spec-based summary failed, falling back to simple listing"
            summary=$(jq -r '
              .suites[]?.suites[]?.specs[] // empty | 
              select(.title) |
              "‚Ä¢ " + .title
            ' $RESULTS_FILE 2>/dev/null | head -15)
          fi
          
          # If we still have no summary, use stats-based approach or create fallback
          if [ -z "$summary" ]; then
            echo "All spec parsing failed, using fallback summary"
            if [ "$PASSED_TESTS" -gt 0 ]; then
              summary="‚Ä¢ $PASSED_TESTS tests passed ‚úÖ"
            fi
            if [ "$FAILED_TESTS" -gt 0 ]; then
              summary="$summary\\n‚Ä¢ $FAILED_TESTS tests failed ‚ùå"
            fi
            if [ "$FLAKY_TESTS" -gt 0 ]; then
              summary="$summary\\n‚Ä¢ $FLAKY_TESTS tests flaky ‚ö†Ô∏è"
            fi
            if [ -z "$summary" ]; then
              summary="‚Ä¢ Tests executed - see full report for details"
            fi
          fi
          
          echo "Final summary before Teams formatting:"
          echo "$summary"
          
          # Convert to proper Teams format with line breaks for list items
          summary=$(echo "$summary" | sed ':a;N;$!ba;s/\n/\\n/g')

          # Get failed test details with actual error messages
          failed_details=""
          if [ "$FAILED_TESTS" -gt 0 ]; then
            failed_details=$(jq -r '
              .suites[]?.suites[]?.specs[] // empty | 
              select(.ok == false) |
              "‚Ä¢ " + .title + 
              if .tests[0]?.results[0]?.error?.message then
                " (" + (.tests[0].results[0].error.message | split("\n")[0]) + ")"
              else
                " (Test failed)"
              end
            ' $RESULTS_FILE 2>/dev/null | head -5)
            
            # Convert to single line and add header if we have details
            if [ ! -z "$failed_details" ]; then
              failed_details=$(echo "$failed_details" | sed ':a;N;$!ba;s/\n/\\n/g')
              failed_details="\\n\\n**‚ùå Failed Tests:**\\n$failed_details"
            fi
          fi
          
          # Get flaky test details  
          flaky_details=""
          if [ "$FLAKY_TESTS" -gt 0 ]; then
            flaky_details=$(jq -r '
              .suites[]?.suites[]?.specs[] // empty | 
              select(.tests[]?.results[]?.status == "flaky") |
              "‚Ä¢ " + .title + " (Flaky - passed after retry)"
            ' $RESULTS_FILE 2>/dev/null | head -5)
            
            # Convert to single line and add header if we have details
            if [ ! -z "$flaky_details" ]; then
              flaky_details=$(echo "$flaky_details" | sed ':a;N;$!ba;s/\n/\\n/g')
              failed_details="$failed_details\\n\\n**‚ö†Ô∏è Flaky Tests:**\\n$flaky_details"
            fi
          fi

          latest_url="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/$REPORT_TS/"

          # Send comprehensive Teams message with sender information
          curl -H 'Content-Type: application/json' \
            -d "{
              \"text\": \"$EMOJI **Ngage Test Results**\\n\\n**$STATUS**\\n\\nüìä **Summary:**\\n‚Ä¢ Total: $TOTAL_TESTS tests\\n‚Ä¢ Passed: $PASSED_TESTS\\n‚Ä¢ Failed: $FAILED_TESTS\\n‚Ä¢ Flaky: $FLAKY_TESTS\\n‚Ä¢ Duration: ${DURATION_SEC}s\\n\\nüìã **Test Details:**\\n$summary$failed_details\\n\\nüìë [View Full Report]($latest_url)\\nüîó [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\\n\\n---\\nüë§ **Sent by:** ng-navaneetha | üïê **Time:** $(TZ='Asia/Kolkata' date +'%a %b %d %Y, %I:%M:%S %p IST')\"
            }" \
            ${{ secrets.TEAMS_WEBHOOK_URL }}
