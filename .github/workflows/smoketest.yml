name: Ngage Playwright Test Report

on:
  schedule:
    - cron: "30 3 * * 1-5"   # 9:00 AM IST, Monday–Friday
  workflow_dispatch:
permissions:
  contents: write     

jobs:
  smoke:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Install additional tools
        run: sudo apt-get update && sudo apt-get install -y bc jq

      - name: Run Playwright smoke tests with HTML + JSON report
        id: tests
        continue-on-error: true
        run: |
          mkdir -p reports
          ts=$(date +'%Y-%m-%d_%H-%M-%S')
          
          echo "Starting Playwright tests in CI environment..."
          echo "CI Environment: $CI"
          echo "Node version: $(node --version)"
          echo "Playwright version: $(npx playwright --version)"
          
          # Run tests with CI-optimized settings
          npx playwright test --grep @smoke --workers=1  --timeout=180000 
          
          # Move HTML report
          if [ -d "playwright-report" ]; then
            mv playwright-report "reports/$ts"
          else
            mkdir -p "reports/$ts"
            echo "No HTML report generated" > "reports/$ts/index.html"
          fi
          
          # Copy JSON results
          if [ -f "test-results/results.json" ]; then
            cp "test-results/results.json" "reports/$ts/results.json"
            echo "✅ Found results.json"
          else
            echo "❌ No results.json file found"
            echo '{"stats":{"expected":0,"unexpected":1,"flaky":0,"skipped":0,"duration":0},"suites":[]}' > "reports/$ts/results.json"
          fi
          
          echo "REPORT_TS=$ts" >> $GITHUB_ENV

      - name: Deploy Playwright reports to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports
          publish_branch: gh-pages
          keep_files: true

      - name: Parse results and send summary to Teams
        if: always()
        run: |
          RESULTS_FILE="reports/$REPORT_TS/results.json"
          
          # Check if results file exists and has actual test data
          if [ ! -f "$RESULTS_FILE" ]; then
            echo "Results file not found, sending failure notification"
            curl -H 'Content-Type: application/json' \
              -d "{\"text\": \"🚨 **Ngage Test Results**\n\n❌ Test execution failed - no results available\n🕐 Time: $(TZ='Asia/Kolkata' date +'%a %b %d %Y, %I:%M:%S %p IST')\n🔗 [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n---\n👤 **Sent by:** ng-navaneetha\"}" \
              ${{ secrets.TEAMS_WEBHOOK_URL }}
            exit 0
          fi
          
          echo "✅ Results file found. Contents structure:"
          # Check if this is a new Playwright format (has suites) or old format (has stats)
          HAS_SUITES=$(jq 'has("suites")' $RESULTS_FILE 2>/dev/null || echo "false")
          HAS_STATS=$(jq 'has("stats")' $RESULTS_FILE 2>/dev/null || echo "false")
          echo "Has suites: $HAS_SUITES, Has stats: $HAS_STATS"
          
          # Debug: Show actual structure
          echo "JSON structure preview:"
          jq 'keys' $RESULTS_FILE 2>/dev/null || echo "Failed to parse JSON keys"
          
          # Parse test results based on actual JSON structure
          if [ "$HAS_STATS" = "true" ]; then
            echo "Using stats-based parsing"
            # Check if it's a placeholder file (created when tests fail early)
            TOTAL_FROM_STATS=$(jq -r '.stats.expected + .stats.unexpected + .stats.flaky + .stats.skipped // 0' $RESULTS_FILE 2>/dev/null || echo "0")
            
            if [ "$TOTAL_FROM_STATS" -eq 0 ]; then
              echo "Empty stats detected, this appears to be a placeholder file"
              curl -H 'Content-Type: application/json' \
                -d "{\"text\": \"🚨 **Ngage Test Results**\n\n❌ Test execution failed - no test results found\n🕐 Time: $(TZ='Asia/Kolkata' date +'%a %b %d %Y, %I:%M:%S %p IST')\n🔗 [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n---\n👤 **Sent by:** ng-navaneetha\"}" \
                ${{ secrets.TEAMS_WEBHOOK_URL }}
              exit 0
            fi
            
            TOTAL_TESTS=$(jq -r '.stats.expected + .stats.unexpected + .stats.flaky + .stats.skipped' $RESULTS_FILE)
            PASSED_TESTS=$(jq -r '.stats.expected' $RESULTS_FILE)
            FAILED_TESTS=$(jq -r '.stats.unexpected' $RESULTS_FILE)
            FLAKY_TESTS=$(jq -r '.stats.flaky' $RESULTS_FILE)
            DURATION=$(jq -r '.stats.duration' $RESULTS_FILE)
          elif [ "$HAS_SUITES" = "true" ]; then
            echo "Using suites-based parsing (new Playwright format)"
            # Try different levels to count tests - specs are usually the actual test cases
            TOTAL_TESTS=$(jq '[.suites[]?.specs[]?] | length' $RESULTS_FILE 2>/dev/null || echo "0")
            PASSED_TESTS=$(jq '[.suites[]?.specs[]? | select(.tests[0].results[0].status == "passed")] | length' $RESULTS_FILE 2>/dev/null || echo "0")
            FAILED_TESTS=$(jq '[.suites[]?.specs[]? | select(.tests[0].results[0].status == "failed")] | length' $RESULTS_FILE 2>/dev/null || echo "0")
            FLAKY_TESTS=$(jq '[.suites[]?.specs[]? | select(.tests[0].results[0].status == "flaky")] | length' $RESULTS_FILE 2>/dev/null || echo "0")
            DURATION=$(jq '[.suites[]?.specs[]?.tests[]?.results[]?.duration // 0] | add // 0' $RESULTS_FILE 2>/dev/null || echo "0")
          else
            echo "Unknown JSON format, attempting fallback parsing"
            # Fallback: try to count any objects with status
            TOTAL_TESTS=$(jq '[.. | objects | select(.status? != null)] | length' $RESULTS_FILE 2>/dev/null || echo "0")
            PASSED_TESTS=$(jq '[.. | objects | select(.status? == "passed")] | length' $RESULTS_FILE 2>/dev/null || echo "0")
            FAILED_TESTS=$(jq '[.. | objects | select(.status? == "failed")] | length' $RESULTS_FILE 2>/dev/null || echo "0")
            FLAKY_TESTS=$(jq '[.. | objects | select(.status? == "flaky")] | length' $RESULTS_FILE 2>/dev/null || echo "0")
            DURATION=$(jq '[.. | objects | select(.duration? != null) | .duration] | add // 0' $RESULTS_FILE 2>/dev/null || echo "0")
            
            if [ "$TOTAL_TESTS" -eq 0 ]; then
              echo "No test results found with fallback method"
              curl -H 'Content-Type: application/json' \
                -d "{\"text\": \"🚨 **Ngage Test Results**\n\n❌ Test execution failed - unable to parse results\n🕐 Time: $(TZ='Asia/Kolkata' date +'%a %b %d %Y, %I:%M:%S %p IST')\n🔗 [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n---\n👤 **Sent by:** ng-navaneetha\"}" \
                ${{ secrets.TEAMS_WEBHOOK_URL }}
              exit 0
            fi
          fi
          
          echo "Parsed counts - Total: $TOTAL_TESTS, Passed: $PASSED_TESTS, Failed: $FAILED_TESTS, Flaky: $FLAKY_TESTS, Duration: $DURATION"
          
          # Convert duration to seconds
          DURATION_SEC=$(echo "scale=1; $DURATION / 1000" | bc -l 2>/dev/null || echo "0")

          # Determine status and emoji
          if [ "$FAILED_TESTS" -eq 0 ] && [ "$FLAKY_TESTS" -eq 0 ]; then
            STATUS="✅ All Tests Passed"
            EMOJI="🎉"
          elif [ "$FAILED_TESTS" -gt 0 ]; then
            STATUS="❌ Tests Failed"
            EMOJI="🚨"
          else
            STATUS="⚠️ Flaky Tests Detected"
            EMOJI="⚠️"
          fi

          # Get test summary with status - try multiple approaches based on actual JSON structure
          summary=""
          if [ "$HAS_SUITES" = "true" ]; then
            echo "Extracting test summary from suites format"
            # New format: extract from suites
            summary=$(jq -r '
              .suites[]?.specs[]? | 
              select(.title) |
              "• " + .title + " → " + (.tests[0].results[0].status // "unknown")
            ' $RESULTS_FILE 2>/dev/null | head -15)
          fi
          
          # If first approach fails or we have old format, try alternative methods
          if [ -z "$summary" ]; then
            echo "Trying alternative summary extraction"
            summary=$(jq -r '
              .suites[]?.specs[]? | 
              select(.title) |
              "• " + .title
            ' $RESULTS_FILE 2>/dev/null | head -15)
          fi
          
          # If still empty, try extracting with broader selector
          if [ -z "$summary" ]; then
            echo "Trying broader summary extraction"
            summary=$(jq -r '
              .. | 
              objects | 
              select(.title? and (.title | test("TC|@smoke"; "i"))) |
              "• " + .title
            ' $RESULTS_FILE 2>/dev/null | head -15)
          fi
          
          # If we still have no summary, create a basic one
          if [ -z "$summary" ]; then
            echo "Using fallback summary"
            summary="• Tests executed - see full report for details"
          fi
          
          echo "Final summary before Teams formatting:"
          echo "$summary"
          
          # Convert to proper Teams format with line breaks for list items
          summary=$(echo "$summary" | sed ':a;N;$!ba;s/\n/\\n/g')

          # Get failed test details if any - use the format we detected
          failed_details=""
          if [ "$FAILED_TESTS" -gt 0 ] || [ "$FLAKY_TESTS" -gt 0 ]; then
            if [ "$HAS_SUITES" = "true" ]; then
              # New format: extract from suites
              failed_details=$(jq -r '
                .suites[]?.specs[]? | 
                select(.tests) |
                select(.tests[0].results[0].status != "passed") |
                "• " + .title + " (" + (.tests[0].results[0].status // "unknown") + ")"
              ' $RESULTS_FILE 2>/dev/null | head -5)
            fi
            
            # If first approach fails, try alternative
            if [ -z "$failed_details" ]; then
              failed_details=$(jq -r '
                .. | 
                objects | 
                select(.status? and .status != "passed") |
                "• Test failed (" + (.status // "unknown") + ")"
              ' $RESULTS_FILE 2>/dev/null | head -5)
            fi
            
            # Convert to single line and add header if we have details
            if [ ! -z "$failed_details" ]; then
              failed_details=$(echo "$failed_details" | sed ':a;N;$!ba;s/\n/\\n/g')
              failed_details="\\n\\n**❌ Failed/Flaky Tests:**\\n$failed_details"
            fi
          fi

          latest_url="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/$REPORT_TS/"

          # Send comprehensive Teams message with sender information
          curl -H 'Content-Type: application/json' \
            -d "{
              \"text\": \"$EMOJI **Ngage Test Results**\\n\\n**$STATUS**\\n\\n📊 **Summary:**\\n• Total: $TOTAL_TESTS tests\\n• Passed: $PASSED_TESTS\\n• Failed: $FAILED_TESTS\\n• Flaky: $FLAKY_TESTS\\n• Duration: ${DURATION_SEC}s\\n\\n📋 **Test Details:**\\n$summary$failed_details\\n\\n📑 [View Full Report]($latest_url)\\n🔗 [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\\n\\n---\\n👤 **Sent by:** ng-navaneetha | 🕐 **Time:** $(TZ='Asia/Kolkata' date +'%a %b %d %Y, %I:%M:%S %p IST')\"
            }" \
            ${{ secrets.TEAMS_WEBHOOK_URL }}
