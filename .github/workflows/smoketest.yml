name: Ngage test Report

on:
  schedule:
    - cron: "30 3 * * 1-5"   # 9:00 AM IST, Monday–Friday
  workflow_dispatch:

jobs:
  smoke:
    runs-on: ubuntu-latest
    
    # Set environment variables from repository secrets
    env:
      DASHBOARD_URL: ${{ secrets.DASHBOARD_URL }}
      EMAIL: ${{ secrets.EMAIL }}
      PASSWORD: ${{ secrets.PASSWORD }}
      INVITEE_EMAIL: ${{ secrets.INVITEE_EMAIL }}
      INVITEE_PASSWORD: ${{ secrets.INVITEE_PASSWORD }}
      INVITE_EMAIL: ${{ secrets.INVITE_EMAIL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Install additional tools
        run: sudo apt-get update && sudo apt-get install -y bc jq

      - name: Run Playwright smoke tests with HTML + JSON report
        id: tests
        continue-on-error: true  # Continue workflow even if tests fail
        run: |
          echo "🔍 Environment Variables Check:"
          echo "DASHBOARD_URL: ${DASHBOARD_URL:-NOT_SET}"
          echo "EMAIL: ${EMAIL:-NOT_SET}"
          echo "PASSWORD: ${PASSWORD:+***SET***}"
          echo "INVITEE_EMAIL: ${INVITEE_EMAIL:-NOT_SET}"
          echo "INVITEE_PASSWORD: ${INVITEE_PASSWORD:+***SET***}"
          echo "INVITE_EMAIL: ${INVITE_EMAIL:-NOT_SET}"
          
          mkdir -p reports
          npx playwright test --grep @smoke --workers=1 --timeout=180000
          ts=$(date +'%Y-%m-%d_%H-%M-%S')
          
          # Move reports and handle missing files gracefully
          if [ -d "playwright-report" ]; then
            mv playwright-report "reports/$ts"
          else
            mkdir -p "reports/$ts"
            echo "No HTML report generated" > "reports/$ts/index.html"
          fi
          
          if [ -f "results.json" ]; then
            mv results.json "reports/$ts/results.json"
          else
            echo "No results.json file found - tests may have failed during execution"
            # Create a minimal results file for failed execution
            echo '{"stats":{"expected":0,"unexpected":1,"flaky":0,"skipped":0,"duration":0},"suites":[]}' > "reports/$ts/results.json"
          fi
          
          echo "REPORT_TS=$ts" >> $GITHUB_ENV

      - name: Deploy Playwright reports to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()  # Always deploy reports, even if tests failed
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports
          publish_branch: gh-pages
          keep_files: true  # keep older reports instead of deleting them

      - name: Parse results and send summary to Teams
        if: always()  # Always send Teams notification, regardless of test outcome
        run: |
          RESULTS_FILE="reports/$REPORT_TS/results.json"
          
          # Check if results file exists and has actual test data
          if [ ! -f "$RESULTS_FILE" ]; then
            echo "Results file not found, sending failure notification"
            curl -H 'Content-Type: application/json' \
              -d "{\"text\": \"🚨 **Ngage Test Results**\n\n❌ Test execution failed - no results available\n🕐 Time: $(date)\n🔗 [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\"}" \
              ${{ secrets.TEAMS_WEBHOOK_URL }}
            exit 0
          fi
          
          echo "✅ Results file found. First 30 lines:"
          head -30 "$RESULTS_FILE"
          echo "--- End debug info ---"

          # Check if it's a placeholder file (created when tests fail early)
          TOTAL_FROM_STATS=$(jq -r '.stats.expected + .stats.unexpected + .stats.flaky // 0' $RESULTS_FILE 2>/dev/null || echo "0")
          
          if [ "$TOTAL_FROM_STATS" -eq 0 ]; then
            echo "Empty or invalid results file, checking for actual test results"
            # Try the robust method to count actual test results
            ACTUAL_TESTS=$(jq '[.. | objects | select(.status? != null)] | length' $RESULTS_FILE 2>/dev/null || echo "0")
            
            if [ "$ACTUAL_TESTS" -eq 0 ]; then
              echo "No actual test results found, sending failure notification"
              curl -H 'Content-Type: application/json' \
                -d "{\"text\": \"🚨 **Ngage Test Results**\n\n❌ Test execution failed - no test results found\n🕐 Time: $(date)\n🔗 [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\"}" \
                ${{ secrets.TEAMS_WEBHOOK_URL }}
              exit 0
            fi
          fi

          # Use stats-based parsing to match HTML report exactly
          TOTAL_TESTS=$(jq -r '.stats.expected + .stats.unexpected + .stats.flaky + .stats.skipped' $RESULTS_FILE)
          PASSED_TESTS=$(jq -r '.stats.expected // 0' $RESULTS_FILE)
          FAILED_TESTS=$(jq -r '.stats.unexpected // 0' $RESULTS_FILE)
          FLAKY_TESTS=$(jq -r '.stats.flaky // 0' $RESULTS_FILE)
          SKIPPED_TESTS=$(jq -r '.stats.skipped // 0' $RESULTS_FILE)
          DURATION=$(jq -r '.stats.duration // 0' $RESULTS_FILE)
          
          # Convert duration to seconds and minutes using jq for better reliability  
          DURATION_SEC=$(jq -r "(.stats.duration // 0) / 1000 * 10 | floor / 10" $RESULTS_FILE)
          DURATION_MIN=$(jq -r "(.stats.duration // 0) / 60000 * 10 | floor / 10" $RESULTS_FILE)

          # Determine status and emoji
          if [ "$FAILED_TESTS" -eq 0 ] && [ "$FLAKY_TESTS" -eq 0 ]; then
            STATUS="✅ All Tests Passed"
            EMOJI="🎉"
          elif [ "$FAILED_TESTS" -gt 0 ]; then
            STATUS="❌ Tests Failed"
            EMOJI="🚨"
          else
            STATUS="⚠️ Flaky Tests Detected"
            EMOJI="⚠️"
          fi

          # Get test summary with status - using correct spec-based approach
          summary=$(jq -r '
            .suites[].suites[]?.specs[] // empty | 
            select(.title) |
            if .ok == true and (.tests[].results | map(.status) | all(. == "passed")) then
              "• " + .title + " → ✅ passed"
            elif .ok == false or (.tests[].results | map(.status) | any(. == "failed")) then
              "• " + .title + " → ❌ failed"  
            elif .ok == true and (.tests[].results | map(.status) | any(. == "flaky")) then
              "• " + .title + " → ⚠️ flaky"
            else
              "• " + .title + " → ❓ unknown"
            end
          ' $RESULTS_FILE 2>/dev/null | head -15)
          
          # Fallback to simple spec listing if complex status parsing fails
          if [ -z "$summary" ]; then
            echo "Complex status parsing failed, falling back to simple spec listing"
            summary=$(jq -r '
              .suites[].suites[]?.specs[] // empty | 
              select(.title) |
              "• " + .title
            ' $RESULTS_FILE 2>/dev/null | head -15)
          fi
          
          # If we still have no summary, create a basic one
          if [ -z "$summary" ]; then
            echo "All spec parsing failed, using fallback summary"
            summary="• Tests executed - see full report for details"
          fi
          
          # Convert to proper Teams format with line breaks for list items
          summary=$(echo "$summary" | sed ':a;N;$!ba;s/\n/\\n/g')

          # Get failed test details if any - using spec-based approach
          failed_details=""
          if [ "$FAILED_TESTS" -gt 0 ] || [ "$FLAKY_TESTS" -gt 0 ]; then
            failed_details=$(jq -r '
              .suites[].suites[]?.specs[] // empty | 
              select(.title) |
              select(.ok == false or 
                     (.tests[].results | map(.status) | any(. == "failed" or . == "flaky"))) |
              if (.tests[].results | map(.status) | any(. == "failed")) then
                "• " + .title + " (failed)"
              elif (.tests[].results | map(.status) | any(. == "flaky")) then
                "• " + .title + " (flaky)"
              else
                "• " + .title + " (unknown issue)"
              end
            ' $RESULTS_FILE 2>/dev/null | head -5)
            
            # Convert to single line and add header if we have details
            if [ ! -z "$failed_details" ]; then
              failed_details=$(echo "$failed_details" | sed ':a;N;$!ba;s/\n/\\n/g')
              failed_details="\\n\\n**❌ Failed/Flaky Tests:**\\n$failed_details"
            fi
          fi

          latest_url="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/$REPORT_TS/"

          # Send comprehensive Teams message
          if [ -z "${{ secrets.TEAMS_WEBHOOK_URL }}" ]; then
            echo "Warning: TEAMS_WEBHOOK_URL secret not configured"
            exit 0
          fi


          # Send comprehensive Teams message
          curl -H 'Content-Type: application/json' \
            -d "{
              \"text\": \"$EMOJI **Ngage Test Results**\\n\\n**$STATUS**\\n\\n📊 **Summary:**\\n• Total: $TOTAL_TESTS tests\\n• Passed: $PASSED_TESTS\\n• Failed: $FAILED_TESTS\\n• Flaky: $FLAKY_TESTS\\n• Skipped: $SKIPPED_TESTS\\n• Duration: ${DURATION_SEC}s (${DURATION_MIN}m)\\n\\n📋 **Test Details:**\\n$summary$failed_details\\n\\n📑 [View Full Report]($latest_url)\\n🔗 [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\\n\\n---\\n👤 **Sent by:** Navaneetha B | 🕐 **Time:** $(TZ='Asia/Kolkata' date +'%a %b %d %Y, %I:%M:%S %p IST')"
            }" \
            "${{ secrets.TEAMS_WEBHOOK_URL }}"
